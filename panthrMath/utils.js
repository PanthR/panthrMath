(function(define) {'use strict';
define(function(require) {

   /* repeat, for carrying out repeated improvement until stopping
    * condition is satisfied.
    *
    * `init` is the initial value,
    * `step` is a function which returns the new value, and
    * `stop` is a non-negative integer (number of steps to take),
    *  a function of no arguments returning a boolean, or missing.
    */
   function repeat(init, step, stop) {
      var prev, curr, done;
      curr = init;
      if (stop === 0) { return curr; }
      done = typeof stop === 'function' ? stop :
             stop > 0 ? function() { stop -= 1; return stop === 0; } :
                     function() { return curr === prev; };
      while (!done()) {
         prev = curr;
         curr = step();
      }
      return curr;
   }

   /* series
    * - `f` is a function two arguments, `index` and `prev` (previous
    *     value).  It will be called starting at `index` 0.
    * - `stop` is the same as in `repeat`.
    * Add up the terms generated by `f` for index >= 0; stopping conditions
    * are the same as for `repeat`.
    */
   function series(f, stop) {
      var sum, curr, i;
      i = 0;
      curr = f(0);
      sum = curr;
      return repeat(sum, function() {
         i += 1;
         curr = f(i, curr);
         sum += curr;
         return sum;
      }, stop);
   }

   /* mixin */
   return {
      mixin: function mixin(target) {
         Array.prototype.slice.call(arguments, 1)
            .forEach(function(source) {
               Object.keys(source).forEach(function(key) {
                  target[key] = source[key];
               });
            });
         return target;
      },
      repeat: repeat,
      series: series
   };

});

}(typeof define === 'function' && define.amd ? define : function(factory) {
   'use strict';
   module.exports = factory(require);
}));
