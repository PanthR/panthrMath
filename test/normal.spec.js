var normal = require('../panthrMath/distributions/normal');
var chai = require('chai');
var expect = chai.expect;

var precision = 1e-5;

chai.use(function(_chai, utils) {
   var Assertion = _chai.Assertion;

   Assertion.addMethod('relativelyCloseTo', function(x0, delta) {
      var x = utils.flag(this, 'object');
      var denom = Math.max(Math.abs(x0), Math.abs(x));
      var res = Math.abs(x - x0) / denom;
      new Assertion(res).to.be.below(delta);
   });
});

describe('Normal Distribution', function() {
   it('dnormlog', function() {
      [[0, -0.918938],
       [1, -1.418939],
       [2, -2.918939],
       [3, -5.418939],
       [4, -8.918939],
       [-1, -1.418939],
       [-2, -2.918939],
       [-3, -5.418939],
       [-4, -8.918939],
       [-5, -13.418939]
      ].forEach(function(pair) {
      expect(normal.dnormLog(0, 1)(pair[0]))
         .to.be.relativelyCloseTo(pair[1], precision);
      });
      var mu = 2.3, sigma = 0.0012;
      expect(normal.dnormLog(mu,sigma)(2.2912))
         .to.be.relativelyCloseTo(-21.08239, precision);
   });
   it('dnorm', function() {
      [[0, 3.989423e-01],
       [1, 2.419707e-01],
       [2, 5.399097e-02],
       [3, 4.431848e-03],
       [4, 1.338302e-04],
       [-1, 2.419707e-01],
       [-2, 5.399097e-02],
       [-3, 4.431848e-03],
       [-4, 1.338302e-04],
       [-5, 1.486720e-06]
      ].forEach(function(pair) {
      expect(normal.dnorm(0, 1)(pair[0]))
         .to.be.relativelyCloseTo(pair[1], precision);
      });
      var mu = 2.3, sigma = 0.0012;
      expect(normal.dnorm(mu,sigma)(2.2912))
         .to.be.relativelyCloseTo(6.982851e-10, precision);
   });
   it('pnorm', function() {
      [[0, 0.5],
       [ 0.1, 0.539827837277029],
       [ 0.2, 0.579259709439103],
       [-0.2, 0.420740290560897],
       [-0.1, 0.460172162722971],
       [ 0.5, 0.691462461274013],
       [-0.5, 0.308537538725987],
       [1.123, 0.869281252774423],
       [-2.1122323312, 0.0173332633434504],
       [1, 0.841344746068543],
       [2, 0.977249868051821],
       [-2, 0.0227501319481792],
       [ 6, 0.999999999013412],
       [-6.5, 4.01600058385912e-11],
       [-9.2, 1.78974881201405e-20]
      ].forEach(function(pair) {
      expect(normal.pnorm(0, 1)(pair[0]))
         .to.be.relativelyCloseTo(pair[1], precision * 1e-9);
      });
   });
   it('qnorm', function() {
      [
      [1e-05, -4.26489079392283],
       [0.0344920689655173, -1.81852363327252],
       [0.0689741379310345, -1.48347491700239],
       [0.103456206896552, -1.26210108810362],
       [0.137938275862069, -1.08962911675931],
       [0.172420344827586, -0.944643933405741],
       [0.206902413793103, -0.817216302629661],
       [0.241384482758621, -0.701856008994357],
       [0.275866551724138, -0.595165119427612],
       [0.310348620689655, -0.494862417175939],
       [0.344830689655172, -0.399314642546093],
       [0.37931275862069, -0.307286228204389],
       [0.413794827586207, -0.217793954427277],
       [0.448276896551724, -0.130015968233253],
       [0.482758965517241, -0.0432303259901666],
       [0.517241034482759, 0.043230325990167],
       [0.551723103448276, 0.130015968233253],
       [0.586205172413793, 0.217793954427277],
       [0.62068724137931, 0.307286228204389],
       [0.655169310344828, 0.399314642546094],
       [0.689651379310345, 0.49486241717594],
       [0.724133448275862, 0.595165119427612],
       [0.758615517241379, 0.701856008994357],
       [0.793097586206897, 0.817216302629662],
       [0.827579655172414, 0.944643933405742],
       [0.862061724137931, 1.08962911675931],
       [0.896543793103448, 1.26210108810362],
       [0.931025862068966, 1.48347491700239],
       [0.965507931034483, 1.81852363327252],
       [0.99999, 4.26489079392384]
      ].forEach(function(pair) {
      expect(normal.qnorm(0, 1)(pair[0]))
         .to.be.relativelyCloseTo(pair[1], precision * 1e-7);
      });
   });
});
