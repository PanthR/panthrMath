var main = require('..');
var chai = require('chai');
var expect = chai.expect;
var utils = require('../panthrMath/utils');

var precision = 1e-8;

   /* Rcode generating the tests:
      options(digits = 20)
      x = c(0:4, floor(exp(1:5)))
      a = exp(-6:0)
      as = rep(a, each = length(x))
      xs = rep(x, length(a))
      xs2 = signif(xs, digits=15)
      as2 = signif(as, digits=15)

      geoms2 = dgeom(xs2, as2, log = TRUE)
      ps2 = pgeom(xs2, as2, lower.tail = TRUE, log.p=TRUE)
      qs2 = pgeom(xs2, as2, lower.tail = FALSE, log.p=TRUE)
      xs2 = formatC(xs2, digits=15, format="g")
      as2 = formatC(as2, digits=15, format="g")
      ps2 = formatC(ps2, digits=15, format="g")
      qs2 = formatC(qs2, digits=15, format="g")

      s = paste(xs2, as2, geoms2, sep=", ", collapse="],\n[")
      s = paste("[", s, "]", sep="")

      s2 = paste(xs2, as2, ps2, qs2, sep=", ", collapse="],\n[")
      s2 = paste("[", s2, "]", sep="")
    */
describe('Geometric Distribution', function() {
   it('dgeom', function() {
      [[               0, 0.00247875217666636, -6],
       [               1, 0.00247875217666636, -6.00248182936896],
       [               2, 0.00247875217666636, -6.00496365873792],
       [               3, 0.00247875217666636, -6.00744548810688],
       [               4, 0.00247875217666636, -6.00992731747584],
       [               2, 0.00247875217666636, -6.00496365873792],
       [               7, 0.00247875217666636, -6.01737280558272],
       [              20, 0.00247875217666636, -6.04963658737919],
       [              54, 0.00247875217666636, -6.13401878592381],
       [             148, 0.00247875217666636, -6.36731074660601],
       [               0, 0.00673794699908547, -5],
       [               1, 0.00673794699908547, -5.00676074944949],
       [               2, 0.00673794699908547, -5.01352149889898],
       [               3, 0.00673794699908547, -5.02028224834847],
       [               4, 0.00673794699908547, -5.02704299779795],
       [               2, 0.00673794699908547, -5.01352149889898],
       [               7, 0.00673794699908547, -5.04732524614642],
       [              20, 0.00673794699908547, -5.13521498898977],
       [              54, 0.00673794699908547, -5.36508047027238],
       [             148, 0.00673794699908547, -6.00059091852431],
       [               0, 0.0183156388887342, -4],
       [               1, 0.0183156388887342, -4.01848544682589],
       [               2, 0.0183156388887342, -4.03697089365177],
       [               3, 0.0183156388887342, -4.05545634047766],
       [               4, 0.0183156388887342, -4.07394178730355],
       [               2, 0.0183156388887342, -4.03697089365177],
       [               7, 0.0183156388887342, -4.12939812778121],
       [              20, 0.0183156388887342, -4.36970893651773],
       [              54, 0.0183156388887342, -4.99821412859787],
       [             148, 0.0183156388887342, -6.73584613023121],
       [               0, 0.0497870683678639, -3],
       [               1, 0.0497870683678639, -3.0510691809427],
       [               2, 0.0497870683678639, -3.1021383618854],
       [               3, 0.0497870683678639, -3.15320754282811],
       [               4, 0.0497870683678639, -3.20427672377081],
       [               2, 0.0497870683678639, -3.1021383618854],
       [               7, 0.0497870683678639, -3.35748426659891],
       [              20, 0.0497870683678639, -4.02138361885403],
       [              54, 0.0497870683678639, -5.75773577090588],
       [             148, 0.0497870683678639, -10.5582387795198],
       [               0, 0.135335283236613, -2],
       [               1, 0.135335283236613, -2.14541345786886],
       [               2, 0.135335283236613, -2.29082691573772],
       [               3, 0.135335283236613, -2.43624037360658],
       [               4, 0.135335283236613, -2.58165383147544],
       [               2, 0.135335283236613, -2.29082691573772],
       [               7, 0.135335283236613, -3.01789420508201],
       [              20, 0.135335283236613, -4.90826915737719],
       [              54, 0.135335283236613, -9.85232672491841],
       [             148, 0.135335283236613, -23.5211917645912],
       [               0, 0.367879441171442, -1],
       [               1, 0.367879441171442, -1.45867514538708],
       [               2, 0.367879441171442, -1.91735029077416],
       [               3, 0.367879441171442, -2.37602543616125],
       [               4, 0.367879441171442, -2.83470058154833],
       [               2, 0.367879441171442, -1.91735029077416],
       [               7, 0.367879441171442, -4.21072601770957],
       [              20, 0.367879441171442, -10.1735029077416],
       [              54, 0.367879441171442, -25.7684578509024],
       [             148, 0.367879441171442, -68.883921517288],
       [               0,                1, 0],
       [               1,                1, -Infinity],
       [               2,                1, -Infinity],
       [               3,                1, -Infinity],
       [               4,                1, -Infinity],
       [               2,                1, -Infinity],
       [               7,                1, -Infinity],
       [              20,                1, -Infinity],
       [              54,                1, -Infinity],
       [             148,                1, -Infinity]
      ].forEach(function(tuple) {
         var x, a, logp, rlogp;
         x = tuple[0];
         a = tuple[1];
         rlogp = tuple[2];
         logp = main.dgeom(a, true)(x);
         expect(utils.relativelyCloseTo(rlogp, logp, precision)).to.be.ok;
      });
   });

   it('pgeom and qgeom', function() {
      [[               0, 0.00247875217666636,               -6, -0.00248182936895953],
       [               1, 0.00247875217666636, -5.3080929641901, -0.00496365873791906],
       [               2, 0.00247875217666636, -4.9038674875429, -0.00744548810687859],
       [               3, 0.00247875217666636, -4.61742453326377, -0.00992731747583812],
       [               4, 0.00247875217666636, -4.39551958683502, -0.0124091468447976],
       [               2, 0.00247875217666636, -4.9038674875429, -0.00744548810687859],
       [               7, 0.00247875217666636, -3.9292286925383, -0.0198546349516762],
       [              20, 0.00247875217666636, -2.9801829347827, -0.0521184167481501],
       [              54, 0.00247875217666636, -2.05890023413379, -0.136500615292774],
       [             148, 0.00247875217666636, -1.17401802998295, -0.36979257597497],
       [               0, 0.00673794699908547,               -5, -0.00676074944948856],
       [               1, 0.00673794699908547, -4.31022748070904, -0.0135214988989771],
       [               2, 0.00673794699908547, -3.90813322492837, -0.0202822483484657],
       [               3, 0.00673794699908547, -3.62381819590612, -0.0270429977979542],
       [               4, 0.00673794699908547, -3.40403787918441, -0.0338037472474428],
       [               2, 0.00673794699908547, -3.90813322492837, -0.0202822483484657],
       [               7, 0.00673794699908547, -2.94410110156438, -0.0540859955959085],
       [              20, 0.00673794699908547, -2.02224722269799, -0.14197573843926],
       [              54, 0.00673794699908547, -1.16945449900521, -0.371841219721871],
       [             148, 0.00673794699908547, -0.454421394494495, -1.0073516679738],
       [               0, 0.0183156388887342,               -4, -0.0184854468258866],
       [               1, 0.0183156388887342, -3.3160528294931, -0.0369708936517732],
       [               2, 0.0183156388887342, -2.91975925748636, -0.0554563404776597],
       [               3, 0.0183156388887342, -2.64122024961655, -0.0739417873035463],
       [               4, 0.0183156388887342, -2.42719129476938, -0.0924272341294329],
       [               2, 0.0183156388887342, -2.91975925748636, -0.0554563404776597],
       [               7, 0.0183156388887342, -1.98436069485217, -0.147883574607093],
       [              20, 0.0183156388887342, -1.13407518142491, -0.388194383343618],
       [              54, 0.0183156388887342, -0.449083231096543, -1.01669957542376],
       [             148, 0.0183156388887342, -0.0657675978603192, -2.7543315770571],
       [               0, 0.0497870683678639,               -3, -0.0510691809427015],
       [               1, 0.0497870683678639, -2.33206143767698, -0.102138361885403],
       [               2, 0.0497870683678639, -1.95158772740004, -0.153207542828105],
       [               3, 0.0497870683678639, -1.6886799738767, -0.204276723770806],
       [               4, 0.0497870683678639, -1.49009386044648, -0.255345904713508],
       [               2, 0.0497870683678639, -1.95158772740004, -0.153207542828105],
       [               7, 0.0497870683678639, -1.09246407687852, -0.408553447541612],
       [              20, 0.0497870683678639, -0.41880602952353, -1.07245279979673],
       [              54, 0.0497870683678639, -0.0621701101875924, -2.80880495184859],
       [             148, 0.0497870683678639, -0.000495937820099476, -7.60930796046253],
       [               0, 0.135335283236613,               -2, -0.145413457868859],
       [               1, 0.135335283236613, -1.37691873960033, -0.290826915737719],
       [               2, 0.135335283236613, -1.0397651933295, -0.436240373606578],
       [               3, 0.135335283236613, -0.818649530801204, -0.581653831475438],
       [               4, 0.135335283236613, -0.660339998172853, -0.727067289344297],
       [               2, 0.135335283236613, -1.0397651933295, -0.436240373606578],
       [               7, 0.135335283236613, -0.374622160689613, -1.16330766295088],
       [              20, 0.135335283236613, -0.0483343505229074, -3.05368261524605],
       [              54, 0.135335283236613, -0.000336278104479173, -7.99774018278727],
       [             148, 0.135335283236613, -3.89325554119564e-10, -21.6666052224601],
       [               0, 0.367879441171442,               -1, -0.458675145387081],
       [               1, 0.367879441171442, -0.510119874355251, -0.917350290774163],
       [               2, 0.367879441171442, -0.291128615400283, -1.37602543616124],
       [               3, 0.367879441171442, -0.173950254308009, -1.83470058154833],
       [               4, 0.367879441171442, -0.106389033595401, -2.29337572693541],
       [               2, 0.367879441171442, -0.291128615400283, -1.37602543616124],
       [               7, 0.367879441171442, -0.0258222744532507, -3.66940116309665],
       [              20, 0.367879441171442, -6.55861993303396e-05, -9.63217805312871],
       [              54, 0.367879441171442, -1.10661192386591e-11, -25.2271329962895],
       [             148, 0.367879441171442, -2.08539049846564e-30, -68.3425966626751],
       [               0,                1,                0,             -Infinity],
       [               1,                1,                0,             -Infinity],
       [               2,                1,                0,             -Infinity],
       [               3,                1,                0,             -Infinity],
       [               4,                1,                0,             -Infinity],
       [               2,                1,                0,             -Infinity],
       [               7,                1,                0,             -Infinity],
       [              20,                1,                0,             -Infinity],
       [              54,                1,                0,             -Infinity],
       [             148,                1,                0,             -Infinity]
      ].forEach(function(tuple) {
         var x, a, logp, rlogp, rlogq, xfromqexp;
         x = tuple[0];
         a = tuple[1];
         rlogp = tuple[2];
         rlogq = tuple[3];
         logp = main.pgeom(a, true, true)(x);
         if (!utils.isEssentiallyZero(rlogp) && !utils.isEssentiallyZero(rlogq)) {
            expect(utils.relativelyCloseTo(rlogp, logp, precision)).to.be.ok;
            expect(utils.relativelyCloseTo(Math.exp(rlogp),
               main.pgeom(a)(x), precision)).to.be.ok;
            expect(utils.relativelyCloseTo(rlogq,
               main.pgeom(a, false, true)(x), precision)).to.be.ok;
            expect(utils.relativelyCloseTo(Math.exp(rlogq),
               main.pgeom(a, false)(x), precision)).to.be.ok;
            xfromqexp = main.qgeom(a, true, true)(logp);
            expect(utils.relativelyCloseTo(xfromqexp, x, precision)).to.be.ok;
            xfromqexp = main.qgeom(a, false, true)(rlogq);
            expect(utils.relativelyCloseTo(xfromqexp, x, precision)).to.be.ok;
         }
      });
   });

   it('is also exported as an object', function() {
      var o;
      o = main.geom(.1);
      ['d', 'p', 'q', 'r'].forEach(function(s) {
         expect(o).to.respondTo(s);
         if (s !== 'r') {
            expect(o[s](.2)).to.equal(main[s + 'geom'](.1)(.2));
         }
      });
   });

});
